#!/usr/bin/env python3

import fitter

import json
import pathlib
import argparse


default_dir = f"{pathlib.Path.home()}/.GCfit"


if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='fit some GCs')

    parser.add_argument('cluster', help='Common name of the cluster to model')

    parser.add_argument('--savedir', default=default_dir,
                        help='location of saved sampling runs')
    parser.add_argument('-o', '--outdir', default=default_dir,
                        help='location to store output plots and data')
    parser.add_argument('-i', '--initials',
                        help='alternative JSON file with different intials')

    parser.add_argument('-N', '--Niters', default=3000, type=int,
                        help='Number of sampling iterations')
    parser.add_argument('--Nwalkers', default=32, type=int,
                        help='Number of walkers for MCMC sampler')

    parser.add_argument('--continue', dest='cont_run', action='store_true',
                        help='Continue from previous saved run')
    parser.add_argument('--verbose', action='store_true')
    parser.add_argument('--debug', action='store_true')

    parallel_group = parser.add_mutually_exclusive_group()
    parallel_group.add_argument("--Ncpu", default=2, type=int,
                                help="Number of `multiprocessing` processes")
    parallel_group.add_argument("--mpi", action="store_true",
                                help="Run with MPI rather than multiprocessing")

    parser.add_argument('--fix', dest='fixed_params', nargs='*',
                        help='Parameters to fix, not estimate from the MCMC')

    parser.add_argument('--exclude', dest='excluded_likelihoods', nargs='*',
                        help='Likelihood components to exclude from posteriors')

    args = parser.parse_args()

    if args.cont_run:
        raise NotImplementedError

    if args.initials:

        if (init_file := pathlib.Path(args.initials)).is_file():

            with open(init_file, 'r') as init_of:
                args.initials = json.load(init_of)

        else:
            parser.error(f"Cannot access '{init_file}': No such file")

    pathlib.Path(args.outdir).mkdir(exist_ok=True)
    pathlib.Path(args.savedir).mkdir(exist_ok=True)

    print('args:', vars(args))

    fitter.main(**vars(args))
