#!/usr/bin/env python3

from fitter import data
import fitter.visualize as viz
from fitter.likelihoods import create_model

import h5py
import numpy as np
import matplotlib.pyplot as plt

import pathlib
import argparse


if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='View the output of model run')

    parser.add_argument('infile', help='Model output hdf file')

    parser.add_argument('--cluster', required=False,
                        help='Cluster name. If not, will try to read from file')

    parser.add_argument('-o', '--outdir', required=False,
                        help='location to save output plots, rather than show')

    parser.add_argument('-i', '--indices', default=None, nargs='*', type=int,
                        help='Iterations to use. If None, uses entire chain')

    parser.add_argument('-c', '--compare', action='store_true',
                        help='If `-i` given, compares each chosen iteration '
                             'seperately, rather than averaging together')

    args = parser.parse_args()

    # ----------------------------------------------------------------------
    # Load all data
    # ----------------------------------------------------------------------

    infile = pathlib.Path(args.infile)

    if not infile.exists():
        parser.error(f'Input file {infile} does not exist')

    with h5py.File(infile, 'r') as hdf:
        chain = hdf['mcmc']['chain'][:]

    cluster = args.cluster
    if not cluster:

        name_ind = infile.name.find('_')
        if name_ind < 0:
            parser.error(f'Could not find cluster name in {infile}, provide it')

        cluster = infile.name[:name_ind]

    obs = data.Observations(cluster)

    # ----------------------------------------------------------------------
    # Extract desired parts of chain
    # ----------------------------------------------------------------------

    if args.indices is not None:
        chain = chain[args.indices, :, :]

    # ----------------------------------------------------------------------
    # Create Visualizer instances
    # ----------------------------------------------------------------------

    if not args.compare:

        viewer = viz.Visualizer.from_chain(chain, obs)

        viewer.plot_all()

    else:
        if args.indices is None or len(args.indices) <= 1:
            parser.error('Cannot compare without >1 explicit indices')

        models = [create_model(np.median(theta, axis=0), strict=True)
                  for theta in chain]
        labels = [f"Iteration {i}" for i in args.indices]

        viz.compare_models(*models, observations=obs, labels=labels)

    # ----------------------------------------------------------------------
    # Create plots, save or show
    # ----------------------------------------------------------------------

    plt.show()

    # TODO strip trailing / from dirs
    # pathlib.Path(args.outdir).mkdir(exist_ok=True)
